service: import-service
frameworkVersion: '3'
custom:
  bucketName: cloudx-nodejs-backend-import-bucket2

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1

  environment:
    SQS_URL: arn:aws:sqs:eu-west-1:007756198797:catalogItemsQueue
    SNS_ARN:
      Ref: SNSTopic
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:PutObjectAcl
          Resource:
            - arn:aws:s3:::${self:custom.bucketName}/*
          Sid: AllowPublic
        - Effect: Allow
          Action:
            - sqs:*
          Resource:
            - arn:aws:sqs:eu-west-1:007756198797:catalogItemsQueue
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:eu-west-1:007756198797:table/products
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:eu-west-1:007756198797:table/stocks
        - Effect: "Allow"
          Action: "sns:*"
          Resource:
            Ref: SNSTopic

functions:
  importProductsFile:
    handler: handlers/importProductsFile.importProductsFile
    environment:
      UploadBucket: ${self:custom.bucketName}
    events:
      - http:
          path: import
          method: GET
          cors: true
          request:
            parameters:
              querystrings:
                name: true
          authorizer:
            name: basicAuthorizer
            arn: "arn:aws:lambda:eu-west-1:007756198797:function:authorization-service-dev-basicAuthorizer"
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
  importFileParser:
    handler: handlers/importFileParser.importFileParser
    environment:
      UploadBucket: ${self:custom.bucketName}
    events:
      - s3:
          bucket: ${self:custom.bucketName}
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: uploaded/
            - suffix: .csv
  catalogBatchProcess:
    handler: handlers/catalogBatchProcess.catalogBatchProcess
    events:
      - sqs:
          batchSize: 2
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn
resources:
  Resources:
    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: driverok@gmail.com
        Protocol: email
        TopicArn:
          Ref: SNSTopic
    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - HEAD
                - PUT
                - POST
                - DELETE
              AllowedOrigins:
                - "*"
    UploadBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: UploadBucket
        PolicyDocument:
          Statement:
            - Effect: "Allow"
              Action:
                - s3:GetObject
              Principal: "*"
              Sid: PublicGetObject
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - "Ref": UploadBucket
                    - "/*"
